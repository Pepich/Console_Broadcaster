import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Arrays;
import java.util.HashMap;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class UserManager
{
	private static final String pepper = "AB/%ยง EUEe96758imnstd Aยง%C$WV &"; // Generated by smashing my head into the keyboard. Random enough?
	
	private static HashMap<String, byte[]> passwords;
	private static HashMap<String, byte[]> temps = new HashMap<String, byte[]>();
	private static HashMap<String, byte[]> tokens;
	
	static final String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	static SecureRandom rnd = new SecureRandom();
	
	private static boolean doSave = false;
	
	@SuppressWarnings("unchecked")
	public static boolean load()
	{
		File passwordsfile = new File("RemoteConsole/passwords.data");
		File tokensfile = new File("RemoteConsole/tokens.data");
		
		try
		{
			ObjectInputStream in = new ObjectInputStream(new FileInputStream(passwordsfile));
			passwords = (HashMap<String, byte[]>)in.readObject();
			in.close();
		}
		catch (Exception e)
		{
			passwords = new HashMap<String, byte[]>();
		}
		
		try
		{
			ObjectInputStream in = new ObjectInputStream(new FileInputStream(tokensfile));
			tokens = (HashMap<String, byte[]>)in.readObject();
			in.close();
		}
		catch (Exception e)
		{
			tokens = new HashMap<String, byte[]>();
		}
		
		return true;
	}
	
	public static boolean save()
	{
		if (!doSave) return false;
		File passwordsfile = new File("RemoteConsole/passwords.data");
		File tokensfile = new File("RemoteConsole/tokens.data");
		
		try
		{
			ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(passwordsfile));
			out.writeObject(passwords);
			out.close();
		}
		catch (Exception e) { }
		
		try
		{
			ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(tokensfile));
			out.writeObject(tokens);
			out.close();
		}
		catch (Exception e) { }
		
		return true;
	}

	public static void init(boolean b)
	{
		doSave = b;
		load();
	}
	
	public static void setToken(String username, String token) throws NoSuchAlgorithmException, InvalidKeySpecException
	{
		token = token + pepper;
		tokens.put(username, getEncryptedPassword(token, username.getBytes()));
		save();
	}
	
	public static void setPassword(String username, String password) throws NoSuchAlgorithmException, InvalidKeySpecException
	{
		password = password + pepper;
		passwords.put(username, getEncryptedPassword(password, username.getBytes()));
		save();
	}
	
	public static int authenticate(String username, String attemptedPassword) throws NoSuchAlgorithmException, InvalidKeySpecException
	{
		byte[] encryptedAttemptedPassword = getEncryptedPassword(attemptedPassword + pepper, username.getBytes());
		if (tokens.containsKey(username))
		{
			boolean result = Arrays.equals(tokens.get(username), encryptedAttemptedPassword);
			if (result)
			{
				tokens.remove(username);
				save();
				return 2;
			}
			else return -1;
		}
		else
			if (Arrays.equals(passwords.get(username), encryptedAttemptedPassword))
				return 1;
		return -1;
	}
	
	public static void changePassword(String username, String password)
	{
		try
		{
			byte[] encryptedPassword = getEncryptedPassword(password + pepper, username.getBytes());
			temps.put(username, encryptedPassword);
		}
		catch (Exception e) { }
	}
	
	public static boolean confirm(String username, String password)
	{
		try
		{
			byte[] encryptedPassword = getEncryptedPassword(password + pepper, username.getBytes());
			if (Arrays.equals(temps.get(username), encryptedPassword))
			{
				setPassword(username, password);
				return true;
			}
		} 
		catch (Exception e) { }
		return false;
	}
	
	public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException
	{
		String algorithm = "PBKDF2WithHmacSHA512";
		int derivedKeyLength = 512;
		int iterations = 10000;
		
		KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, derivedKeyLength);
		SecretKeyFactory f = SecretKeyFactory.getInstance(algorithm);
		return f.generateSecret(spec).getEncoded();
	}
	
	public static String genToken()
	{
	   String token = "";
	   for( int i = 0; i < 6; i++ ) 
	      token += AB.charAt(rnd.nextInt(AB.length()));
	   return token;
	}
	
	public static void removeUser(String username)
	{
		tokens.remove(username);
		passwords.remove(username);
	}
}
